0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.10.1
3 info using node@v0.12.4
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/andreas/WebstormProjects/eris-db.js',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/andreas/.npm/eris-db/0.11.3/package.tgz not in flight; packing
9 verbose tar pack [ '/home/andreas/.npm/eris-db/0.11.3/package.tgz',
9 verbose tar pack   '/home/andreas/WebstormProjects/eris-db.js' ]
10 verbose tarball /home/andreas/.npm/eris-db/0.11.3/package.tgz
11 verbose folder /home/andreas/WebstormProjects/eris-db.js
12 info prepublish eris-db@0.11.3
13 verbose addLocalTarball adding from inside cache /home/andreas/.npm/eris-db/0.11.3/package.tgz
14 silly cache afterAdd eris-db@0.11.3
15 verbose afterAdd /home/andreas/.npm/eris-db/0.11.3/package/package.json not in flight; writing
16 verbose afterAdd /home/andreas/.npm/eris-db/0.11.3/package/package.json written
17 silly publish { name: 'eris-db',
17 silly publish   version: '0.11.3',
17 silly publish   main: './index.js',
17 silly publish   dependencies: { ws: '~0.7.1', xmlhttprequest: '~1.7.0' },
17 silly publish   devDependencies:
17 silly publish    { browserify: '^10.2.4',
17 silly publish      'fs-extra': '~0.18.4',
17 silly publish      gulp: '^3.9.0',
17 silly publish      'ink-docstrap': '~0.5.2' },
17 silly publish   scripts: { test: 'mocha' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/eris-ltd/eris-db.js.git' },
17 silly publish   homepage: 'https://github.com/eris-ltd/eris-db.js',
17 silly publish   bugs: { url: 'https://github.com/eris-ltd/eris-db.js/issues' },
17 silly publish   keywords: [ 'eris', 'erisdb', 'javascript', 'node.js', 'API', 'RPC' ],
17 silly publish   author: { name: 'AndreasEris' },
17 silly publish   authors:
17 silly publish    [ { name: 'Andreas Olofsson',
17 silly publish        email: 'andreas@erisindustries.com',
17 silly publish        url: 'http://erisindustries.com' } ],
17 silly publish   license: 'LGPL-3.0',
17 silly publish   readme: '# erisdb-js (Alpha)\n\n`erisdb-js` is a javascript API for [erisdb-tendermint](https://github.com/eris-ltd/eris-db).\n\n## Installation and usage\n\n`npm install eris-db`\n\nThe main class is `ErisDB`. A standard `ErisDB` instance is created like this:\n\n```\nvar edbFactory = require(\'eris-db\');\n\nvar edb = edbFactory.createInstance("http://localhost:1337/rpc");\n\nedb.start(function(error){\n    if(!error){\n        console.log("Ready to go");\n    }\n});\n\n```\n\nThe parameters for `createInstance` is the server URL as a string. The client-type is chosen based on the URL scheme. As of now, the supported schemes are: `http(s)` and `ws(s)` (websockets).\n\nIf you use `http(s)`, the start command will do nothing, so it can just be called and no callback used.\n\nIf you use websockets, the system will not be ready until the start callback fires.\n\nThe start callback must be on the following format: `function(error)`. An error is an indication that the websocket connection failed to be established.\n\nIf you want to use several `ErisDB` instances at once, that is possible. Just create more instances via `edbFactory.createInstance()`. This is the preferred method if you want multiple websocket connections with the eris-db server.\n\nNo config file is needed for this library.\n\n## API Reference\n\nThere are bindings for all the RPC methods. All functions are on the form `function(param1, param2, ... , callback)`, where the callback is a function on the form `function(error,data)` (it is documented under the name `methodCallback`). The `data` object is the same as you would get by calling the corresponding RPC method directly.\n\nThis is the over-all structure of the library. The `unsafe` flag means a private key is either sent or received, so should be used with care (dev only). \n\nNOTE: There will be links to the proper jsdoc and integration with erisindustries.com. For now, the components point to the actual code files and methods points to the web-API method in question.\n\n### ErisDB\n\n| Component Name | Accessor |\n| :------------- | :------- |\n| Accounts | [ErisDB.accounts()](https://github.com/eris-ltd/erisdb-js/blob/master/lib/accounts.js) |\n| Blockchain | [ErisDB.blockchain()](https://github.com/eris-ltd/erisdb-js/blob/master/lib/blockchain.js) |\n| Consensus | [ErisDB.consensus()](https://github.com/eris-ltd/erisdb-js/blob/master/lib/consensus.js) |\n| Events | [ErisDB.events()](https://github.com/eris-ltd/erisdb-js/blob/master/lib/events.js) |\n| NameReg | [ErisDB.namereg()](https://github.com/eris-ltd/erisdb-js/blob/master/lib/namereg.js) |\n| Network | [ErisDB.network()](https://github.com/eris-ltd/erisdb-js/blob/master/lib/network.js) |\n| Transactions | [ErisDB.txs()](https://github.com/eris-ltd/erisdb-js/blob/master/lib/transactions.js) |\n\n### Components\n\n#### Accounts\n\nThe accounts object has methods for getting account and account-storage data.\n\n| Method | RPC method | Notes |\n| :----- | :--------- | :---- | \n| Accounts.getAccounts | [erisdb.getAccounts](https://github.com/eris-ltd/eris-db/blob/master/api.md#getaccounts) | | \n| Accounts.getAccount | [erisdb.getAccount](https://github.com/eris-ltd/eris-db/blob/master/api.md#getaccount) | | \n| Accounts.getStorage | [erisdb.getStorage](https://github.com/eris-ltd/eris-db/blob/master/api.md#getstorage) | | \n| Accounts.getStorageAt | [erisdb.getStorageAt](https://github.com/eris-ltd/eris-db/blob/master/api.md#getstorageat) | | \n| Accounts.genPrivAccount | [erisdb.genPrivAccount](https://github.com/eris-ltd/eris-db/blob/master/api.md#genprivaccount) | unsafe |\n\n#### BlockChain\n\nThe accounts object has methods for getting blockchain-related data, such as a list of blocks, or individual blocks, or the hash of the genesis block.\n\n| Method | RPC method | Notes |\n| :----- | :--------- | :---- |\n| BlockChain.getInfo |  [erisdb.getBlockchainInfo](https://github.com/eris-ltd/eris-db/blob/master/api.md#getblockchaininfo) | |\n| BlockChain.getChainId | [erisdb.getChainId](https://github.com/eris-ltd/eris-db/blob/master/api.md#getchainid) | |\n| BlockChain.getGenesisHash | [erisdb.getGenesisHash](https://github.com/eris-ltd/eris-db/blob/master/api.md#getgenesishash) | |\n| BlockChain.getLatestBlockHeight | [erisdb.getLatestBlockHeight](https://github.com/eris-ltd/eris-db/blob/master/api.md#getlatestblockheight) | |\n| BlockChain.getLatestBlock | [erisdb.getLatestBlock](https://github.com/eris-ltd/eris-db/blob/master/api.md#getlatestblock) | |\n| BlockChain.getBlocks | [erisdb.getBlocks](https://github.com/eris-ltd/eris-db/blob/master/api.md#getblocks) | |\n| BlockChain.getBlock | [erisdb.getBlock](https://github.com/eris-ltd/eris-db/blob/master/api.md#getblock) | |\n\n#### Consensus\n\nThe consensus object has methods for getting consensus-related data.\n\n| Method | RPC method | Notes |\n| :----- | :--------- | :---- |\n| Consensus.getState |   [erisdb.getConsensusState](https://github.com/eris-ltd/eris-db/blob/master/api.md#getconsensusstate) | |\n| Consensus.getValidators | [erisdb.getValidators](https://github.com/eris-ltd/eris-db/blob/master/api.md#getvalidators) | |\n\n#### Events\n\nThe tendermint client will generate and fire off events when important things happen, like when a new block has been committed, or someone is transacting to an account. It is possible to subscribe to these events. These are the methods for subscribing, un-subscribing and polling.\n\n| Method | RPC method | Notes |\n| :----- | :--------- | :---- |\n| Events.subscribe | [erisdb.eventSubscribe](https://github.com/eris-ltd/eris-db/blob/master/api.md#eventsubscribe) | |\n| Events.unsubscribe | [erisdb.eventUnsubscribe](https://github.com/eris-ltd/eris-db/blob/master/api.md#eventunubscribe) | |\n| Events.poll | [erisdb.eventPoll](https://github.com/eris-ltd/eris-db/blob/master/api.md#eventpoll) | |\n\n##### Helpers\n\nThe helper functions makes it easier to manage subscriptions. Normally you\'d be using these functions rather then managing the subscriptions yourself.\n\nHelper functions always contain two callback functions - a `createCallback(error, data)` and an `eventCallback(error, data)`. \n\nThe `createCallback` data is an [EventSub]() object, that can be used to do things like getting the event ID, the subscriber ID, and to stop the subscription. \n\nThe `eventCallback` data is the event object. This object is different depending on the event type. In the case of `NewBlock` it will be a block, the consensus events is a transaction object, etc. More info can be found in the [api doc]().\n\n| Method | Arguments |\n| :----- | :-------- |\n| Events.subAccountInput | `account address <string>` |\n| Events.subAccountOutput | `account address <string>` |\n| Events.subAccountReceive | `account address <string>` |\n| Events.subLogEvent | `account address <string>` |\n| Events.subSolidityEvent | `account address <string>` |\n| Events.subNewBlocks | `-` |\n| Events.subForks | `-` |\n| Events.subBonds | `-` |\n| Events.subUnbonds | `-` |\n| Events.subRebonds | `-` |\n| Events.subDupeouts | `-` |\n\n`subSolidityEvent` and `subLogEvent` are two different names for the same type of subscription (log events).\n\n#### NameReg \n\nThe NameReg object has methods for accessing the name registry.\n\n| Method | RPC method | Notes |\n| :----- | :--------- | :---- |\n| NameReg.getEntry | [erisdb.getNameRegEntry](https://github.com/eris-ltd/eris-db/blob/master/api.md#get-namereg-entry) | |\n| NameReg.getEntries | [erisdb.getNameRegEntries](https://github.com/eris-ltd/eris-db/blob/master/api.md#get-namereg-entries) | |\n\n#### Network\n\nThe accounts object has methods for getting network-related data, such as a list of all peers. It could also have been named "node".\n\nClient Version may be a bit misplaced\n\n| Method | RPC method | Notes |\n| :----- | :--------- | :---- |\n| Network.getInfo | [erisdb.getNetworkInfo](https://github.com/eris-ltd/eris-db/blob/master/api.md#getnetworkinfo) |  |\n| Network.getClientVersion | [erisdb.getClientVersion](https://github.com/eris-ltd/eris-db/blob/master/api.md#getclientversion) | |\n| Network.getMoniker | [erisdb.getMoniker](https://github.com/eris-ltd/eris-db/blob/master/api.md#getmoniker) | |\n| Network.isListening | [erisdb.isListening](https://github.com/eris-ltd/eris-db/blob/master/api.md#islistening) | |\n| Network.getListeners | [erisdb.getListeners](https://github.com/eris-ltd/eris-db/blob/master/api.md#getlisteners) | |\n| Network.getPeers | [erisdb.getPeers](https://github.com/eris-ltd/eris-db/blob/master/api.md#getpeers) | |\n| Network.getPeer | [erisdb.getPeer](https://github.com/eris-ltd/eris-db/blob/master/api.md#getpeer) | |\n\n#### Transactions\n\nA transaction is the equivalence of a database `write` operation. They can be done in two ways. There\'s the "dev" way, which is to call `transact` and pass along the target address (if any), data, gas, and a private key used for signing. It is very similar to the old Ethereum way of transacting, except Tendermint does not keep accounts in the client, so a private key needs to be sent along. This means the server **should either run on the same machine as the tendermint client, or in the same, private network**.\n\nTransacting via `broadcastTx` will be the standard way of doing things if you want the key to remain on the users machine. This requires a browser plugin for doing the actual signing, which we will add later. For now, you should stick to the `transact` method. \n\nTo get a private key for testing/developing, you can run `tendermint gen_account` if you have it installed. You can also run `tools/pa_generator.js` if you have a local node running. It will take the url as command line argument at some point...\n\n##### Calls\n\nCalls provide read-only access to the smart contracts. It is used mostly to get data out of a contract-accounts storage by using the contracts accessor methods, but can be used to call any method that does not change any data in any account. A trivial example would be a contract function that takes two numbers as input, adds them, and then simply returns the sum. \n\nThere are two types of calls. `Call` takes a data string and an account address and calls the code in that account (if any) using the provided data as input. This is the standard method for read-only operations.\n\n`CallCode` works the same except you don\'t provide an account address but the actual compiled code instead. It\'s a dev tool for accessing the VM directly. "Code-execution as a service".\n\n| Method | RPC method | Notes |\n| :----- | :--------- | :---- |\n| Transactions.broadcastTx | [erisdb.broadcastTx](https://github.com/eris-ltd/eris-db/blob/master/api.md#broadcasttx) | see below |\n| Transactions.getUnconfirmedTxs | [erisdb.getUnconfirmedTxs](https://github.com/eris-ltd/eris-db/blob/master/api.md#getunconfirmedtxs) | |\n| Transactions.call | [erisdb.call](https://github.com/eris-ltd/eris-db/blob/master/api.md#call) | |\n| Transactions.callCode | [erisdb.callCode](https://github.com/eris-ltd/eris-db/blob/master/api.md#callcode) | |\n| Transactions.transact | [erisdb.transact](https://github.com/eris-ltd/eris-db/blob/master/api.md#transact) | unsafe |\n| Transactions.transactAndHold | [erisdb.transactAndHold](https://github.com/eris-ltd/eris-db/blob/master/api.md#transact-and-hold) | unsafe |\n| Transactions.transactNameReg | [erisdb.transactNameReg](https://github.com/eris-ltd/eris-db/blob/master/api.md#transactnamereg) | unsafe |\n\n`broadcastTx` is useless until we add a client-side signing solution. \n\n## Tests\n\n`mocha` or `npm test`\n\nIntegration tests requires `erisdb` and `erisdbss` to exist on the path. This is the `eris-db` server and the server deployment utility. More info in the [eris-db](https://github.com/eris-ltd/eris-db) README file.\n\n## Documentation\n\nDocs can be generated by using the scripts `doc.sh` or `devDoc.sh`; the latter includes private fields and functions.\n\n## Browser\n\nThis library will be possible to run from a web-browser at some point.\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '2280b5aa2cfef8a5f7eb9415ed2dcef843616037',
17 silly publish   description: '`erisdb-js` is a javascript API for [erisdb-tendermint](https://github.com/eris-ltd/eris-db).',
17 silly publish   _id: 'eris-db@0.11.3',
17 silly publish   _shasum: 'd672666bf9d1c157b92747cb9144459c80b07556',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name eris-db
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/eris-db
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /home/andreas/.npm/eris-db/0.11.3/package.tgz
25 verbose request uri https://registry.npmjs.org/eris-db
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 21:32:24
28 verbose request using bearer token for auth
29 verbose request id 6ff567ef50d157c9
30 http request PUT https://registry.npmjs.org/eris-db
31 http 403 https://registry.npmjs.org/eris-db
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=60',
32 verbose headers   'content-length': '96',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Tue, 04 Aug 2015 19:32:26 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-fra1239-FRA',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1438716744.608703,VS0,VE1806' }
33 verbose request invalidating /home/andreas/.npm/registry.npmjs.org/eris-db on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 0.11.3." : eris-db
35 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:247:14)
35 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:170:14)
35 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:368:22)
35 verbose stack     at Request.emit (events.js:110:17)
35 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1219:14)
35 verbose stack     at Request.emit (events.js:129:20)
35 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1167:12)
35 verbose stack     at IncomingMessage.emit (events.js:129:20)
35 verbose stack     at _stream_readable.js:908:16
35 verbose stack     at process._tickCallback (node.js:355:11)
36 verbose statusCode 403
37 verbose pkgid eris-db
38 verbose cwd /home/andreas/WebstormProjects/eris-db.js
39 error Linux 3.19.0-15-generic
40 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
41 error node v0.12.4
42 error npm  v2.10.1
43 error code E403
44 error "You cannot publish over the previously published version 0.11.3." : eris-db
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
